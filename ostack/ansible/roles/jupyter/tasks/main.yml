
---
- name: Download bioexcel github  
  become: yes
  git: >
      repo=https://github.com/bioexcel/biobb_workflows.git
      dest=/opt/bioexcel

 
#- name: opt - permission for ansible remote user
#  become: true
#  shell: sudo chown -R {{lookup('env','ANSIBLE_REMOTE_USER')}}:{{lookup('env','ANSIBLE_REMOTE_USER')}} /opt/
- name: Create openssl directory
  become: yes
  file:
    path: /opt/openssl
    state: directory
    mode: '0755'

- name: Generate OpenSSL key and certificate
  become: yes
  shell: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/openssl/mykey.key -out /opt/openssl/mycert.pem -subj "/C=GB/ST=Cambridge/L=Cambridge/O=Global Security/OU=IT Department/CN=ebi.ac.uk/EA=navis@ebi.ac.uk"

- name: openssl - permission for certfile
  become: yes
  file:
    path: /opt/openssl/mycert.pem
    mode: '0644'
 
- name: openssl - permission for keyfile
  become: yes
  file:
    path: /opt/openssl/mykey.key
    mode: '0600'
    
- name: Install openstack client package
  become: yes
  pip:
    name: 'python-openstackclient'
    state: present
    executable: '{{ jupyter_package_manager }}'   
    
- name: Install Python packages
  become: '{{ jupyter_package_manager_become }}'
  pip:
    name: '{{ item }}'
    state: '{{ jupyter_package_state }}'
    executable: '{{ jupyter_package_manager }}'
  with_items:
    - ipython
    - ipykernel
    - jupyter

- name: Check if the IPython profile already exists
  stat:
    path: '{{ ipython_config_filename }}'
  register: ipython_config_exists

- name: Create IPython profile
  when: not ipython_config_exists.stat.exists
  command: ipython profile create
  register: ipython_profile_create_output
  args:
    creates:
      - '{{ ipython_config_filename }}'
      - '{{ ipython_kernel_config_filename }}'

- name: Apply IPython configs
  block:
    - name: IPython main config
      template:
        src: ipython_config.py.j2
        dest: '{{ ipython_config_filename }}'
        force: yes
        mode: 0644

    - name: IPython kernel config
      template:
        src: ipython_kernel_config.py.j2
        dest: '{{ ipython_kernel_config_filename }}'
        force: yes
        mode: 0644
    
- name: Generate Jupyter password
  when: jupyter_plaintext_password != ''
  block:
    - name: Acquire Jupyter password hash
      command: 'python -c "from notebook.auth import passwd; print(passwd(''{{ jupyter_plaintext_password }}''));"'
      register: jupyter_password_output
      no_log: yes
      changed_when: no

- name: Remember Jupyter password hash
  set_fact:
   jupyter_password: '{{ jupyter_password_output.stdout }}'
  changed_when: no

- name: Create Jupyter profile
  command: jupyter notebook --generate-config
  become_user: "{{lookup('env','ANSIBLE_REMOTE_USER')}}"
  args:
    creates: '{{ jupyter_config_filename }}'

- name: Apply Jupyter config
  template:
    src: jupyter_notebook_config.py.j2
    dest: '{{ jupyter_config_filename }}'
    mode: 0644
    force: yes

- name: Install Jupyter as a daemon
  when: jupyter_daemon_enable
  block:
    - name: Find Jupyter server binary
      command: which jupyter-notebook
      register: jupyter_server_which_output
      changed_when: no

- name: Initialize Jupyter server binary path
  set_fact:
     jupyter_daemon_executable: '{{ jupyter_server_which_output.stdout }}'
  changed_when: no

- name: Make sure systemd directory exists
  become: yes
  file:
     path: '{{ jupyter_daemon_systemd_dir }}'
     state: directory

- name: Create systemd script
  become: yes
  template:
     src: jupyter.service.j2
     dest: '{{ jupyter_daemon_systemd_filename }}'
     force: yes     

- name: Enable Jupyter daemon
  become: yes
  command: "{{item}}"
  with_items:
  - bash /home/ubuntu/.bashrc && conda activate biobb
  - systemctl enable jupyter.service
  - systemctl daemon-reload
  - systemctl restart jupyter.service
     
   
#- name: Install jupyter
#  become: true  
#  roles:
#  - role: 'yuriyguts.jupyter'
#    jupyter_ip: "{{lookup('env','ANSIBLE_REMOTE_USER')}}" 
#    jupyter_port: 8888
#    jupyter_plaintext_password: jupytersecret
 #   jupyter_daemon_enable: yes

#- name: Install jupyter 
#  become: yes
#  pip:
#   name: ['jupyter']
#  state: present 
   
#- name: Install jupyter core
#  become: yes
#  pip:
#   name: ['jupyter-core']
#   state: present 
  
#- name: Generate jupyter config
 # become: true
#  shell: /usr/bin/jupyter notebook --generate-config 

#- name: Enable nglview extension
#  become: true
#  shell: jupyter-nbextension enable nglview --py --sys-prefix
  
#- name: Install openstack client
#  become: true
#  apt:
#   name: ['python-openstackclient']
 #  state: present 
   

   #- bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && pip3 install jupyter-core
   #- bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && jupyter-nbextension enable nglview --py --sys-prefix
   #- bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && pip3 install python-openstackclient
   #- bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && openstack server add security group {{lookup('env','external_ip')}} for-jupyter
  
  
#- name: Enable Jupyter daemon
#  become: yes
#  shell: |
#   systemctl enable jupyter.service
#    systemctl daemon-reload
 #   systemctl restart jupyter.service
  

#- bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && /opt/miniconda3/envs/biobb/bin/jupyter notebook --generate-config    
# - bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && conda activate biobb:jupyter notebook --generate-config 
#- name: /home/ubuntu - permission for ansible remote user
#  become: true
# shell: sudo chown -R {{lookup('env','ANSIBLE_REMOTE_USER')}}:{{lookup('env','ANSIBLE_REMOTE_USER')}} /home/ubuntu
  
#- name: Generate jupyter config
#  become: yes
#  shell: jupyter notebook --generate-config 
  
#- name: Start notebook
#  become: yes
#  shell: jupyter notebook --allow-root --notebook-dir=/opt/bioexcel
#  register: jupy_out
  #command: {{ item}}
  #with_items:
  #bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && conda activate biobb
  #jupyter notebook --allow-root 
  
#- name: Get jupyter out
#  become: true
#  debug:
#    msg: "{{ jupy_out.stdout_lines | join('\n') }}"
  # with_items:
 #  -
 
   
  #args:
  #  executable: /usr/bin/env bash
  #command: bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && conda activate biobb && jupyter notebook --generate-config --config-dir=/home/ubuntu/
  #with_items:
  # - bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && conda activate biobb 
  # - bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && jupyter notebook --generate-config 
  
  #args:
  #  executable: /bin/bash
   
  
  #command: "{{item}}"
  #with_items:
  # - bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && cd /opt/bioexcel
  # - bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && conda activate biobb  && jupyter notebook --generate-config  
  # - echo "c.NotebookApp.password='sha1:fd8fae12903a:8bf7be4731a9ee846b1439bd606cdb85fbc63d2a'">> /home/ubuntu/.jupyter/jupyter_notebook_config.py
  # - bash -i /home/{{lookup('env','ANSIBLE_REMOTE_USER')}}/.bashrc && jupyter notebook --certfile=/home/ubuntu/mycert.pem --keyfile /home/ubuntu/mykey.key
    
    
